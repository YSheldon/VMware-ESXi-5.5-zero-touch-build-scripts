# Copyright 2014 Dag Sonstebo
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

################################################################################################
# Accept EULA, set root password, reboot after install and set license. Set install options and 
# set network options.

#dryrun
vmaccepteula
keyboard 'United Kingdom'
rootpw password
reboot
#vmserialnum --esx=<license-key>

# Install to local disk, ignoring SSD drives, overwriting existing VMFS datastores. 
# Use with caution as does not work/apply to all storage controllers.
# No issue with NFS / software iSCSI environments.
# Omitted options: 	
# --overwritevsan (causes install to fail when no vsan partition found).
# --novmfsondisk (prevents local VMFS datastore from being created).
install --firstdisk=local --ignoressd --overwritevmfs

# Set IP addressing and NIC for the duration of the build, changed later once full config downloaded.
# --addvmportgroup set to 0 to prevent creation of portgroup needing changed later on.
network --bootproto=dhcp --device=vmnic0 --addvmportgroup=0

###############################################################################################
# Pre and post installation scripts, interpreter options are [python|busybox]
# All automagic happens on firstboot hence nothing added. 
# %pre --interpreter=busybox 
%post --interpreter=busybox --ignorefailure=true 

########################################################################################################################
# Firstboot
# All configuration of network is done during firstboot, and depends on the host specific configuration file.
# Host configuration file is downloaded and parsed based on argument passed in the KS download URL.
# Interpreter is [busybox|python].
%firstboot --interpreter=busybox 

# Constants
BUILDVERSION="VMware vSphere 5.5 build v1.0";
DOWNLOADURL="http://192.168.0.100";
CONFIGURL="${DOWNLOADURL}/ks/esxi55"
WAITFORHOSTD=120;
WAITFORREMOVAL=15;
DELIMITER1="---";

########################################################################################################################
# Firstboot set to sleep 2 mins to allow the host daemon to fully start. This is an issue on certail blade server models.
sleep ${WAITFORHOSTD};

# Create a build working folder and initial build logging. 
# To prevent any persistency issues the scratch partition is used.
strScratchfolder=`cat /etc/vmware/locker.conf | cut -d" " -f1`;
mkdir ${strScratchfolder}/build;
strBuildfolder="${strScratchfolder}/build";
strLogfile="${strBuildfolder}/build.log";

# Change to the build working folder, all build actions now done from here
cd ${strBuildfolder};
echo "INFO  Build folder: ${strBuildfolder}." >> ${strLogfile};

# Parse kickstart URL and determine host name
strFQDN=`awk 'FNR==2 {print $7}' /var/log/esxi_install.log | cut -d"=" -f3`;
strHostname=`echo ${strFQDN} | cut -d"." -f1`;

# Parse all hardware information and log. This information can be used for customised configuration if required.
strManufacturer=`esxcli hardware platform get | grep Vendor\ Name | cut -d":" -f2 | sed -e 's/^\ //'`;
strModel=`esxcli hardware platform get | grep Product\ Name | cut -d":" -f2 | sed -e 's/^\ //'`;
strSerial=`esxcli hardware platform get | grep Serial\ Number | cut -d":" -f2 | sed -e 's/^\ //'`;
strUUID=`smbiosDump | grep -A 5 System\ Info | grep UUID | cut -d":" -f2 | sed -e 's/[ ]*//'`; 
echo "INFO  System manufacturer/model: ${strManufacturer} ${strModel}" >> ${strLogfile};
echo "INFO  System serial: ${strSerial}" >> ${strLogfile};
echo "INFO  System UUID (from BIOS): ${strUUID}" >> ${strLogfile};

########################################################################################################################
# Basic config
# Set system hostname
echo "INFO  Configuring hostname: ${strFQDN}" >> ${strLogfile};
esxcli system hostname set --fqdn=${strFQDN};

# Rename local datastore to be more descriptive.
# Datastore name is persistent across ALL rebuilds hence find old name first then rename it.
strCurrentdsname=`esxcli --formatter=csv storage filesystem list | grep VMFS | cut -d"," -f7`;
vim-cmd hostsvc/datastore/rename ${strCurrentdsname} "${strHostname}_localds1";
echo "INFO  Local datastore renamed to ${strHostname}_localds1." >> ${strLogfile};

# Determine ESXi version
strESXiversion=`vmware -v`;
strESXinoversion=`vmware -v | cut -d" " -f3`;
echo "INFO  VMware ESXi version installed: ${strESXiversion}" >> ${strLogfile};

# Download all config files (VIBs can be downloaded here if required)
strHostconfigfile="${CONFIGURL}/${strHostname}.cfg";
echo "INFO  Downloading host config file ${strHostconfigfile}." >> ${strLogfile};
wget ${strHostconfigfile};

########################################################################################################################
# Parse all host configuration data
# Since the firstboot part is using busybox the file can simply be included using the source statement thereby loading
# all configuration options as variables
echo "INFO  Applying host source config file ${strHostname}.cfg." >> ${strLogfile};
source ${strHostname}.cfg;

########################################################################################################################
# Clear temporary build network config
echo "INFO  Removing temporary build networking vmk0." >> ${strLogfile};
esxcli network ip interface remove --interface-name=vmk0 >> ${strLogfile} 2>&1;
echo "INFO  Removing temporary build networking vSwitch0." >> ${strLogfile};
esxcli network vswitch standard remove --vswitch-name=vSwitch0 >> ${strLogfile} 2>&1;
sleep ${WAITFORREMOVAL};

########################################################################################################################
# Configure vSwitches 
intVswitchCounter=0;
while :
do
	echo "INFO  ${DELIMITER1}" >> ${strLogfile};
	# Check if vswitch has been specified in host configuration file
	strVswitchName=$(eval echo "\${CFG_VSWITCH${intVswitchCounter}_NAME}");
	if [ ! "${strVswitchName}" ]; then
		echo "INFO  No further vSwitches found in host configuration file." >> ${strLogfile};
		break;
	else
		echo "INFO  Configuring vSwitch${intVswitchCounter}." >> ${strLogfile};
	
		# Parse variable variables
		strVswitchUplink1=$(eval echo "\${CFG_VSWITCH${intVswitchCounter}_UPLINK1}");
		strVswitchUplink2=$(eval echo "\${CFG_VSWITCH${intVswitchCounter}_UPLINK2}");
		strVswitchActive=$(eval echo "\${CFG_VSWITCH${intVswitchCounter}_ACTIVE}");
		strVswitchStandby=$(eval echo "\${CFG_VSWITCH${intVswitchCounter}_STANDBY}");
		strVswitchFailback=$(eval echo "\${CFG_VSWITCH${intVswitchCounter}_FAILBACK}");
		strVswitchFailuredetection=$(eval echo "\${CFG_VSWITCH${intVswitchCounter}_FAILUREDETECTION}");
		strVswitchNotify=$(eval echo "\${CFG_VSWITCH${intVswitchCounter}_NOTIFY}");
		strVswitchLoadbal=$(eval echo "\${CFG_VSWITCH${intVswitchCounter}_LOADBAL}");
		strVswitchPorts=$(eval echo "\${CFG_VSWITCH${intVswitchCounter}_PORTS}");
		strVswitchMTU=$(eval echo "\${CFG_VSWITCH${intVswitchCounter}_MTU}");

		# Configure vswitch
		echo "INFO  Creating ${strVswitchName} with ${strVswitchPorts} ports." >> ${strLogfile};
		esxcli network vswitch standard add --ports=${strVswitchPorts} --vswitch-name=${strVswitchName} >> ${strLogfile} 2>&1;
		echo "INFO  Adding uplink ${strVswitchUplink1} to ${strVswitchName}." >> ${strLogfile};
		esxcli network vswitch standard uplink add --uplink-name=${strVswitchUplink1} --vswitch-name=${strVswitchName} >> ${strLogfile} 2>&1;
		echo "INFO  Adding uplink ${strVswitchUplink2} to ${strVswitchName}." >> ${strLogfile};
		esxcli network vswitch standard uplink add --uplink-name=${strVswitchUplink2} --vswitch-name=${strVswitchName} >> ${strLogfile} 2>&1;
		echo "INFO  Configuring ${strVswitchName} with MTU ${strVswitchMTU}." >> ${strLogfile};
		esxcli network vswitch standard set --mtu=${strVswitchMTU} --vswitch-name=${strVswitchName} >> ${strLogfile} 2>&1;

		# vSwitch failover policy 
		if [ "${strVswitchStandby}" == "" ]; then
			echo "INFO  Configuring ${strVswitchName} with active uplinks ${strVswitchActive} and no standby uplinks." >> ${strLogfile};
			esxcli network vswitch standard policy failover set --active-uplinks=${strVswitchActive} --vswitch-name=${strVswitchName} >> ${strLogfile} 2>&1;
		else
			echo "INFO  Configuring ${strVswitchName} with active uplink ${strVswitchActive} and passive uplink ${strVswitchStandby}." >> ${strLogfile};
			esxcli network vswitch standard policy failover set --active-uplinks=${strVswitchActive} --standby-uplinks=${strVswitchStandby} --vswitch-name=${strVswitchName} >> ${strLogfile} 2>&1;
		fi
		
		# Failback
		if [ "${strVswitchFailback}" ]; then
			echo "INFO  Configuring ${strVswitchName} failback policy set to ${strVswitchFailback}." >> ${strLogfile};
			esxcli network vswitch standard policy failover set --failback=${strVswitchFailback} --vswitch-name=${strVswitchName} >> ${strLogfile} 2>&1;
		fi
		
		# Failure detection
		echo "INFO  Configuring ${strVswitchName} with ${strVswitchFailuredetection} failure detection." >> ${strLogfile};
		esxcli network vswitch standard policy failover set --failure-detection=${strVswitchFailuredetection} --vswitch-name=${strVswitchName} >> ${strLogfile} 2>&1;
		
		# Notify switches
		if [ "${strVswitchNotify}" ]; then
			echo "INFO  Configuring ${strVswitchName} switch notify policy set to ${strVswitchNotify}." >> ${strLogfile};
			esxcli network vswitch standard policy failover set --notify-switches=${strVswitchNotify} --vswitch-name=${strVswitchName} >> ${strLogfile} 2>&1;
		fi
		
		# Loadbal
		echo "INFO  Configuring ${strVswitchName} with ${strVswitchLoadbal} load balancing." >> ${strLogfile};
		esxcli network vswitch standard policy failover set --load-balancing=${strVswitchLoadbal} --vswitch-name=${strVswitchName} >> ${strLogfile} 2>&1;

	fi #Checking for existance of vSwitch config entries

	# Next vSwitch	
	intVswitchCounter=$((intVswitchCounter + 1));
done

########################################################################################################################
# Configure portgroups
intPortgroupCounter=0;
while :
do
	echo "INFO  ${DELIMITER1}" >> ${strLogfile};
	
	# Check if portgroup has been specified in host configuration file
	strPortgroupName=$(eval echo "\${CFG_PORTGROUP${intPortgroupCounter}_NAME}");
	if [ ! "${strPortgroupName}" ]; then
		echo "INFO  No further portgroups found in host configuration file." >> ${strLogfile};
		break;
	else
		echo "INFO  Configuring portgroup ${intPortgroupCounter}." >> ${strLogfile};
		
		# Parse variables
		strPortgroupVswitch=$(eval echo "\${CFG_PORTGROUP${intPortgroupCounter}_VSWITCH}");
		strPortgroupVLAN=$(eval echo "\${CFG_PORTGROUP${intPortgroupCounter}_VLAN}");
		strPortgroupActive=$(eval echo "\${CFG_PORTGROUP${intPortgroupCounter}_ACTIVE}");

		echo "INFO  Configuring portgroup ${strPortgroupName} on ${strPortgroupVswitch}." >> ${strLogfile};
		esxcli network vswitch standard portgroup add --portgroup-name="${strPortgroupName}" --vswitch-name=${strPortgroupVswitch} >> ${strLogfile} 2>&1;
		echo "INFO  Configuring portgroup ${strPortgroupName} to use VLAN ${strPortgroupVLAN}." >> ${strLogfile};
		esxcli network vswitch standard portgroup set --portgroup-name="${strPortgroupName}" --vlan-id=${strPortgroupVLAN} >> ${strLogfile} 2>&1;

		if [ "${strPortgroupActive}" ]; then
			echo "INFO  Configuring portgroup ${strPortgroupName} with active uplink ${strPortgroupActive}." >> ${strLogfile};
			esxcli network vswitch standard portgroup policy failover set --portgroup-name=${strPortgroupName} --active-uplinks=${strPortgroupActive} >> ${strLogfile} 2>&1;
		fi

	fi #Checking for existance of portgroup config entries

	# Next portgroup
	intPortgroupCounter=$((intPortgroupCounter + 1));
done

########################################################################################################################
# Configure vmkernel interfaces
intVmkCounter=0;
while :
do
	echo "INFO  ${DELIMITER1}" >> ${strLogfile};

	# Check if portgroup has been specified in host configuration file
	strVmkName=$(eval echo "\${CFG_VMK${intVmkCounter}_NAME}");
	if [ ! "${strVmkName}" ]; then
		echo "INFO  No further interfaces found in host configuration file." >> ${strLogfile};
		break;
	else
		echo "INFO  Configuring vmk${intVmkCounter}." >> ${strLogfile};

		# Parse variable variables
		strVmkPortgroup=$(eval echo "\${CFG_VMK${intVmkCounter}_PORTGROUP}");
		strVmkType=$(eval echo "\${CFG_VMK${intVmkCounter}_TYPE}");
		strVmkIP=$(eval echo "\${CFG_VMK${intVmkCounter}_IP}");
		strVmkNetmask=$(eval echo "\${CFG_VMK${intVmkCounter}_NETMASK}");
		strVmkMTU=$(eval echo "\${CFG_VMK${intVmkCounter}_MTU}");
		strVmkTags=$(eval echo "\${CFG_VMK${intVmkCounter}_TAGS}");

		# Add interface
		echo "INFO  Configuring interface ${strVmkName} on portgroup ${strVmkPortgroup}." >> ${strLogfile};
		esxcli network ip interface add --interface-name=${strVmkName} --portgroup-name="${strVmkPortgroup}" >> ${strLogfile} 2>&1;
		if [ "${strVmkType}" == "static" ]; then
			echo "INFO  Configuring static IP ${strVmkIP}/${strVmkNetmask}." >> ${strLogfile};
			esxcli network ip interface ipv4 set --interface-name=${strVmkName} --ipv4=${strVmkIP} --netmask=${strVmkNetmask} --type=${strVmkType} >> ${strLogfile} 2>&1;
		elif [ "${strVmkType}" == "dhcp" ]; then
			echo "INFO  Configuring DHCP." >> ${strLogfile};
			esxcli network ip interface ipv4 set --interface-name=${strVmkName} --type=${strVmkType} >> ${strLogfile} 2>&1;
		fi
		
		# Enable interface
		echo "INFO  Enabling ${strVmkName}." >> ${strLogfile};
		esxcli network ip interface set --enabled=true --interface-name=${strVmkName} >> ${strLogfile} 2>&1;
		
		# Set MTU
		echo "INFO  Configuring ${strVmkName} with MTU ${strVmkMTU}." >> ${strLogfile};
		esxcli network ip interface set --mtu=${strVmkMTU} --interface-name=${strVmkName} >> ${strLogfile} 2>&1;

		# Tag network
		for strVmkTag in $(echo ${strVmkTags} | sed 's/,/\ /g');
		do 
			echo "INFO  Tagging ${strVmkName} with tag ${strVmkTag}." >> ${strLogfile};
			esxcli network ip interface tag add --interface-name=${strVmkName} --tagname=${strVmkTag} >> ${strLogfile} 2>&1;
		done

	fi #Checking for existance of vmk config entries

	# Next portgroup
	intVmkCounter=$((intVmkCounter + 1));
done

#####################################################################################################
# Storage
echo "INFO  ${DELIMITER1}" >> ${strLogfile};
if [ "${CFG_ENABLEISCSI}" == "true" ]; 
then
	# Configure iSCSI software adapter, add two vmkernel interfaces with separate uplinks
	echo "INFO  Enabling software iSCSI adapter vmhba33." >> ${strLogfile};
	esxcli iscsi software set --enabled=true >> ${strLogfile} 2>&1;
fi

# Port binding
for strBindVmk in $(echo ${CFG_ISCSIVMKS} | sed 's/,/\ /g');
do 		
	# Configure iSCSI port binding
	echo "INFO  Configuring iSCSI port binding for ${strBindVmk} on software iSCSI storage adapter vmhba33." >> ${strLogfile};
	esxcli iscsi networkportal add --adapter vmhba33 --nic ${strBindVmk} >> ${strLogfile} 2>&1;
done

########################################################################################################################
# Change general system networking settings

# Change system default gateway
echo "INFO  ${DELIMITER1}" >> ${strLogfile};
echo "INFO  Configuring default gateway." >> ${strLogfile};
esxcli network ip route ipv4 add --gateway ${CFG_DG} --network default >> ${strLogfile} 2>&1;
echo -e "INFO  Default gateway added ${CFG_DG}:\n" >> ${strLogfile};
esxcli network ip route ipv4 list >> ${strLogfile} >> ${strLogfile} 2>&1;

# DNS
echo "INFO  ${DELIMITER1}" >> ${strLogfile};
echo "INFO  Configuring DNS: ${CFG_SEARCHDOMAIN} / ${CFG_DNS1} / ${CFG_DNS2}" >> ${strLogfile};
esxcli network ip dns server remove --all --server=
esxcli network ip dns search add --domain=${CFG_SEARCHDOMAIN} >> ${strLogfile} 2>&1;
esxcli network ip dns server add --server=${CFG_DNS1} >> ${strLogfile} 2>&1;
esxcli network ip dns server add --server=${CFG_DNS2} >> ${strLogfile} 2>&1;

# Ntp
echo "INFO  ${DELIMITER1}" >> ${strLogfile};
echo "INFO  Configuring NTP: ${CFG_NTP1}" >> ${strLogfile};
echo "server ${CFG_NTP1}" >> /etc/ntp.conf;
/sbin/chkconfig ntpd on;

# Disable IPv6
echo "INFO  ${DELIMITER1}" >> ${strLogfile};
echo "INFO  Disabling IPv6." >> ${strLogfile};
esxcli network ip set --ipv6-enabled false >> ${strLogfile} 2>&1;

# Enable ESX shell (TSM) and SSH.
echo "INFO  ${DELIMITER1}" >> ${strLogfile};
echo "INFO  Swithcing on ESXi shell (TSM) and SSH." >> ${strLogfile};
vim-cmd hostsvc/enable_esx_shell;
vim-cmd hostsvc/start_esx_shell;
vim-cmd hostsvc/enable_ssh;
vim-cmd hostsvc/start_ssh;

# Change root passwd
echo "INFO  Changing root password." >> ${strLogfile};
echo ${CFG_PASSWORD} | passwd root --stdin;

########################################################################################################################
# Housekeeping and reboot

# Copy build log to persistent scratch storage
echo "INFO  ${DELIMITER1}" >> ${strLogfile};
echo "INFO  Copying build log files to persistent storage in ${Buildfolder}." >> ${strLogfile};
cp /var/log/esxi_install.log ${strBuildfolder}/;
cp /var/log/hostd.log ${strBuildfolder}/hostd_install.log;
cp /var/log/vmkernel.log ${strBuildfolder}/vmkernel_install.log;


# Put host in MM and reboot
echo "INFO  BUILD COMPLETE: ${BUILDVERSION}" >> ${strLogfile};
echo "INFO  HOST REBOOTING." >> ${strLogfile};
esxcli system maintenanceMode set --enable=true;

reboot;
